generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  username  String   @unique
  password  String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // A user can send multiple messages
  sentMessages     Message[] @relation("SentMessages")
  // A user can receive multiple messages
  receivedMessages Message[] @relation("ReceivedMessages")

  groupRole GroupRole[]
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  text       String?
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String   @db.ObjectId
  receiver   User?     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String?   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId
}

model Conversation {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String?
  isGroup Boolean @default(false)

  Message   Message[] @relation("ConversationMessages")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userIDs String[] @db.ObjectId

  groupSettings GroupSettings?

  GroupRole GroupRole[]
}

model GroupSettings {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @unique @db.ObjectId
  description    String? // Optional group description
  adminUserIds   String[]     @db.ObjectId // List of admin user IDs
}

model GroupRole {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.ObjectId

  role Role @default(MEMBER)
}

enum Role {
  MEMBER
  ADMIN
  OWNER
}
